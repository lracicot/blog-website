AWSTemplateFormatVersion: 2010-09-09


# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  HostingBucketDomainName:
    Type: String
  DomainName:
    Type: String
  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:281217159305:certificate/824fa586-f47b-41a4-a345-2a86c7c15416

Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 100
    Environment:
      Variables:
        NODE_ENV: production

  # Api:
  #   BinaryMediaTypes:
  #     - "image~1jpeg"
  #     - "image~1png"
  #   Cors:
  #     AllowMethods: "'*'"
  #     AllowHeaders: "'*'"
  #     AllowOrigin: "'*'"
  #   Auth:
  #     DefaultAuthorizer: AdminAuthorizer

Resources:
  # API setup with authorizer
  WebsiteApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  # This is a Lambda function config associated with the source code: get-all-posts.js
  HomeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server.handler
      Description: Display hello world
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref WebsiteApi
            Path: /
            Method: GET

  # Domain name setup
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFrontOriginAccessIdentityConfig

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    # DependsOn:
    #   - OriginAccessIdentity
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
        Origins:
          - DomainName: !Join ['', [!Ref WebsiteApi, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com']]
            Id: apiGateway
            OriginPath: /Prod
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
          - DomainName: !Join ['', [!Ref HostingBucketDomainName, '.s3.amazonaws.com']]
            Id: hostingHostingBucket
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ''
                - - origin-access-identity/cloudfront/
                  - !Ref OriginAccessIdentity
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: apiGateway
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 60
          MaxTTL: 31536000
          MinTTL: 60
          Compress: true
        CacheBehaviors:
          - PathPattern: '_next/*'
            TargetOriginId: hostingHostingBucket
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            DefaultTTL: 86400
            MaxTTL: 31536000
            MinTTL: 60
            Compress: true
            ForwardedValues:
              QueryString: false




  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z2E6WEFRHH6156
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # This is always the hosted zone ID when you create an alias record that routes traffic to a CloudFront distribution.
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: true

  # WebsiteDomainName:
  #   Type: AWS::ApiGateway::DomainName
  #   Properties:
  #     CertificateArn: !Ref CertificateArn
  #     DomainName: !Ref DomainName

  WebsiteApiBasePathMapping:
    # DependsOn: WebsiteDomainName
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref WebsiteApi
      Stage: Prod

  # DNSRecord:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: Z2E6WEFRHH6156
  #     Name: !Ref DomainName
  #     Type: A
  #     AliasTarget:
  #       HostedZoneId: !GetAtt WebsiteDomainName.DistributionHostedZoneId
  #       DNSName: !GetAtt WebsiteDomainName.DistributionDomainName

Outputs:
  ApiUrl:
    Description: Url of the api
    Value: !Join ['', ['https://', !Ref DNSRecord]]
    Export:
      Name: !Join [ '-', [!Ref 'AWS::StackName', 'ApiUrl']]
