AWSTemplateFormatVersion: 2010-09-09


# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  HostingBucketDomainName:
    Type: String
  DomainName:
    Type: String
  CertificateArn:
    Type: String
  HostedZoneId:
    Type: String
  PostTableStreamArn:
    Type: String

Globals:
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 100
    Environment:
      Variables:
        NODE_ENV: production

Resources:
  WebsiteApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  HomeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server.handler
      Description: Display the home page
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref WebsiteApi
            Path: /
            Method: GET

  PostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server.handler
      Description: Diaplays a post
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref WebsiteApi
            Path: /post/{slug}
            Method: GET

  PageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server.handler
      Description: Display a page
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref WebsiteApi
            Path: /{page}
            Method: GET

  # This refreshes when DynamoDB entry is created
  RefreshCacheWorker:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cache.handler
      MemorySize: 256
      Environment:
        Variables:
          CF_DISTRIBUTION_ID: !Ref CloudFrontDistribution
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "cloudfront:CreateInvalidation"
                  - "cloudfront:GetInvalidation"
                  - "cloudfront:ListInvalidations"
                Resource:
                  - !GetAtt CloudFrontDistribution.Arn
      Events:
        ExportTableEventSource:
          Type: DynamoDB
          Properties:
            Stream: !Ref PostTableStreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10

  PageHealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: healthcheck.handler
      Description: Ping all pages from the sitemap to warm the cache
      Environment:
        Variables:
          WEBSITE_URL: !Ref DomainName

  HealthCheckRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "HealthCheckRule"
      ScheduleExpression: "rate(1 hour)"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt PageHealthCheckFunction.Arn
          Id: PageHealthCheckFunction

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PageHealthCheckFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt HealthCheckRule.Arn

  # Domain name setup
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: CloudFrontOriginAccessIdentityConfig

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only
        Origins:
          - DomainName: !Join ['', [!Ref WebsiteApi, '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com']]
            Id: apiGateway
            OriginPath: /Prod
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
          - DomainName: !Join ['', [!Ref HostingBucketDomainName, '.s3.amazonaws.com']]
            Id: hostingHostingBucket
            OriginPath: /out
            S3OriginConfig:
              OriginAccessIdentity: !Join
                - ''
                - - origin-access-identity/cloudfront/
                  - !Ref OriginAccessIdentity
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: apiGateway
          ForwardedValues:
            QueryString: false
          ViewerProtocolPolicy: redirect-to-https
          DefaultTTL: 31536000
          MaxTTL: 31536000
          MinTTL: 86400
          Compress: true
        CacheBehaviors:
          - PathPattern: '_next/*'
            TargetOriginId: hostingHostingBucket
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            DefaultTTL: 31536000
            MaxTTL: 31536000
            MinTTL: 86400
            Compress: true
            ForwardedValues:
              QueryString: false
          - PathPattern: '*.png'
            TargetOriginId: hostingHostingBucket
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            DefaultTTL: 31536000
            MaxTTL: 31536000
            MinTTL: 60
            Compress: true
            ForwardedValues:
              QueryString: false
          - PathPattern: '*.xml'
            TargetOriginId: hostingHostingBucket
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
            DefaultTTL: 31536000
            MaxTTL: 31536000
            MinTTL: 86400
            Compress: true
            ForwardedValues:
              QueryString: false

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2 # This is always the hosted zone ID when you create an alias record that routes traffic to a CloudFront distribution.
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        EvaluateTargetHealth: false

Outputs:
  ApiUrl:
    Description: Url of the api
    Value: !Join ['', ['https://', !Ref DNSRecord]]
    Export:
      Name: !Join [ '-', [!Ref 'AWS::StackName', 'ApiUrl']]
